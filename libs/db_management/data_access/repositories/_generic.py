from abc import (
    ABC,
    abstractmethod
)
from typing import (
    Type,
    Generic,
    List,
    TypeVar
)

from sqlalchemy import delete, select, update
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.ext.asyncio import AsyncSession

from ...core.entities import BaseSqlModel


TEntity = TypeVar("TEntity", bound=BaseSqlModel)


class GenericRepository(Generic[TEntity], ABC):
    """
    Base repository class for all models

    Use 'entity_type' to access the generic entity type passed in the subclass
    """
    entity_type: Type[TEntity]

    def __init_subclass__(cls):
        cls.entity_type = cls.__orig_bases__[0].__args__[0]

    @abstractmethod
    async def add(self, entity: TEntity) -> TEntity:
        raise NotImplementedError()

    @abstractmethod
    async def add_all(self, entities: List[TEntity]) -> List[TEntity]:
        raise NotImplementedError()

    @abstractmethod
    async def get_one_or_none_by_id(self, id: int) -> TEntity | None:
        raise NotImplementedError()

    @abstractmethod
    async def get_one_or_none(self, filters_dict: dict) -> TEntity | None:
        raise NotImplementedError()

    @abstractmethod
    async def get_all(self, filters_dict: dict | None) -> List[TEntity]:
        raise NotImplementedError()

    @abstractmethod
    async def update_one_by_id(self, entity_id: int, values_dict: dict) -> TEntity:
        raise NotImplementedError()

    @abstractmethod
    async def update_all(self, filters_dict: dict, values_dicts: List[dict]) -> int:
        raise NotImplementedError()

    @abstractmethod
    async def delete_one_by_id(self, id: int) -> bool:
        raise NotImplementedError()

    @abstractmethod
    async def delete_all(self, filters_dict: dict | None) -> int:
        raise NotImplementedError()


class GenericSqlRepository(GenericRepository[TEntity]):
    def __init__(self, session: AsyncSession):
        self.__session = session

    async def add(self, entity: TEntity) -> TEntity:
        """
        Adds a new entity to the database.

        This method adds the provided entity to the session and flushes the session to 
        ensure the entity is persisted in the database. If the entity has an id specified, 
        it will be added with that id. Otherwise, a new id will be generated by the database.

        Args:
            entity (Model): The entity to be added to the database.

        Returns:
            TEntity: The added entity.
        """
        self.__session.add(entity)
        try:
            await self.__session.flush()
        except SQLAlchemyError as e:
            await self.__session.rollback()
            raise
        return entity

    async def add_all(self, entities: List[TEntity]) -> List[TEntity]:
        """
        Adds a list of entities to the database.

        This method takes a list of entities, adds them to the session, and 
        flushes the session to ensure they are persisted in the database.
        If any entity has an id specified, it will be added with that id.
        Otherwise, new ids will be generated by the database.

        Args:
            entities (List[Model]): A list of entities to be added to the database.

        Returns:
            List[TEntity]: A list of the added entities.
        """
        self.__session.add_all(entities)
        try:
            await self.__session.flush()
        except SQLAlchemyError as e:
            await self.__session.rollback()
            raise
        return entities

    async def get_one_or_none_by_id(self, entity_id: int) -> TEntity | None:
        """
        Retrieves a single entity by its id from the database.

        This method queries the database for an entity with the specified id.
        If no entity is found with the given id, it returns None.

        Args:
            id (int): The id of the entity to retrieve.

        Returns:
            Model | None: The entity with the specified id if found, None otherwise.
        """
        try:
            return await self.__session.get(self.entity_type, entity_id)
        except SQLAlchemyError as e:
            raise

    async def get_one_or_none(
        self,
        filters_dict: dict
    ) -> TEntity | None:
        """
        Retrieves a single entity matching the filter criteria from the database.

        This method queries the database for an entity matching the provided filter 
        dictionary. If no entity is found matching the criteria, it returns None.

        Args:
            filters_dict (dict): A dictionary of filter criteria to match against.

        Returns:
            Model | None: The matching entity if found, None otherwise.
        """
        try:
            query = select(self.entity_type).filter_by(**filters_dict).limit(1)
            result = await self.__session.execute(query)
            record = result.scalar_one_or_none()
            return record
        except SQLAlchemyError as e:
            raise

    async def get_all(
        self,
        filters_dict: dict | None
    ) -> List[TEntity]:
        """
        Retrieves all entities optionally matching filter criteria from the database.

        This method queries the database for all entities, optionally filtered by the 
        provided filter dictionary. Returns an empty list if no entities are found.

        Args:
            filters_dict (dict | None): Optional dictionary of filter criteria to match against.

        Returns:
            List[Model]: List of all matching entities.
        """
        query = select(self.entity_type)
        if filters_dict:
            query = query.filter_by(**filters_dict)

        try:
            result = await self.__session.execute(query)
            records = result.scalars().all()
            return records
        except SQLAlchemyError as e:
            raise

    async def update_one_by_id(
        self,
        entity_id: int,
        values_dict: dict
    ) -> TEntity:
        """
        Updates a single entity in the database by its id.

        This method retrieves the entity with the specified id, updates its attributes 
        with the values provided in the values_dict, and persists the changes to the database. 
        If the entity is not found, a ValueError is raised.

        Args:
            entity_id (int): The id of the entity to update.
            values_dict (dict): A dictionary of values to update in the entity.

        Returns:
            TEntity: The updated entity.

        Raises:
            ValueError: If the entity with the specified id is not found.
            SQLAlchemyError: If there is an error during the database operation.
        """
        try:
            record = await self.__session.get(self.entity_type, entity_id)
            if not record:
                raise ValueError(f"Entity with id {entity_id} not found")
            for key, value in values_dict.items():
                setattr(record, key, value)
            await self.__session.flush()
            return record
        except SQLAlchemyError as e:
            await self.__session.rollback()
            raise

    async def update(self, entity: TEntity) -> int:
        """
        Updates an existing entity with id (!) or creates a new one if it does not exist.

        This method uses the SQLAlchemy `merge` function to either update an existing 
        entity with the same id in the database or create a new entity if no such 
        entity exists. Return id

        Args:
            entity (Model): The entity to be updated or created.

        Returns:
            int: The updated or newly created entity's id.
        """
        await self.__session.merge(entity)
        await self.__session.flush()
        return entity.id

    async def update_all(
        self,
        filters_dict: dict,
        values_dict: dict
    ) -> int:
        """
        Updates multiple entities in the database that match the filter criteria.

        This method constructs an update query based on the provided filter dictionary 
        and updates the matching entities with the values specified in the values dictionary. 
        It returns the number of rows affected by the update operation.

        Args:
            filters_dict (dict): A dictionary of filter criteria to match against.
            values_dict (dict): A dictionary of values to update in the matching entities.

        Returns:
            int: The number of rows affected by the update operation.
        """
        try:
            query = (
                update(self.entity_type)
                .filter_by(**filters_dict)
                .values(**values_dict)
            )
            result = await self.__session.execute(query)
            await self.__session.flush()
            return result.rowcount
        except SQLAlchemyError as e:
            await self.__session.rollback()
            raise

    async def delete_one_by_id(
        self,
        entity_id: int,
    ) -> bool:
        """
        Deletes a single entity from the database by its ID.

        This method retrieves the entity with the specified ID and deletes it from
        the database if found. The session is flushed to ensure the deletion is
        persisted.

        Args:
            entity_id (int): The ID of the entity to delete.

        Returns:
            bool: True if the entity was deleted successfully, False otherwise.

        Raises:
            SQLAlchemyError: If there is an error during the database operation.
        """
        try:
            record = await self.__session.get(self.entity_type, entity_id)
            if record:
                await self.__session.delete(record)
                await self.__session.flush()
                return True
            return False
        except SQLAlchemyError as e:
            await self.__session.rollback()
            raise

    async def delete_all(
        self,
        filters_dict: dict | None
    ) -> int:
        """
        Deletes multiple entities from the database based on filter criteria.

        This method constructs a delete query and optionally filters the entities
        to delete based on the provided filter dictionary. The session is flushed
        to ensure the deletions are persisted.

        Args:
            filters_dict (dict | None): Optional dictionary of filter criteria to
                match against. If None, all entities will be deleted.

        Returns:
            int: The number of rows affected by the delete operation.

        Raises:
            SQLAlchemyError: If there is an error during the database operation.
        """
        query = delete(self.entity_type)
        if filters_dict:
            query = query.filter_by(**filters_dict)

        try:
            result = await self.__session.execute(query)
            await self.__session.flush()
            return result.rowcount
        except SQLAlchemyError as e:
            await self.__session.rollback()
            raise
